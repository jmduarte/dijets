import ROOT
from fullLims_1cat import getAsymLimits,makeAFillGraph,makeAGraph
from massplot import end,make2DGraph,avtotwidth,parser
import math,sys,time,os,glob,tdrstyle
from array import array
tdrstyle.setTDRStyle()
ROOT.gStyle.SetPadRightMargin(0.18);
ROOT.gStyle.SetPadLeftMargin(0.18);
ROOT.gStyle.SetPadTopMargin(0.10);
ROOT.gStyle.SetPalette(55);

def merge(iPGraph,iCGraph,color,iX=-1,iXMax=100000):
    x = array('d', [])
    y = array('d', [])
    for i0 in range(0,iCGraph.GetN()):
        if iCGraph.GetX()[i0] > iX and iX > 0:
            break
        x.append(iCGraph.GetX()[i0])
        y.append(iCGraph.GetY()[i0])

    for i0 in range(0,iPGraph.GetN()):
        if iPGraph.GetX()[i0] > iXMax:
            break
        if iX < 0:
            x.append(iPGraph.GetX()[i0])
            y.append(iPGraph.GetY()[i0])
        elif iPGraph.GetX()[i0] > iX:
            x.append(iPGraph.GetX()[i0])
            y.append(iPGraph.GetY()[i0])
    lGraph    = makeAGraph( x, y, color, 3 )
    lGraph.SetMarkerColor(color)
    return lGraph


def dijetexp(color,i90CL=False):
    if i90CL:
        lPFile = ROOT.TFile("PF90CL.root")
        lPGraph = lPFile.Get("exp")
        lCFile = ROOT.TFile("Calo90CL.root")
        lCGraph = lCFile.Get("exp")
        lGraph = merge(lPGraph,lCGraph,color,1400,3900)
        return lGraph
    x = array('d', [])
    y = array('d', [])
    x.append(601.9305019305019)
    y.append(8.619535664753032)
    x.append(650.1930501930501)
    y.append(6.170531598835212)
    x.append(698.4555984555984)
    y.append(3.95161107144985)
    x.append(746.7181467181467)
    y.append(2.6263635276533353)
    x.append(812.3552123552123)
    y.append(2.0251239642430052)
    x.append(879.9227799227799)
    y.append(1.811609194200417)
    x.append(953.2818532818533)
    y.append(1.5615230060004996)
    x.append(1032.4324324324325)
    y.append(1.117859177755407)
    x.append(1117.3745173745174)
    y.append(0.9284145445194764)
    x.append(1204.2471042471043)
    y.append(0.7158774948942709)
    x.append(1291.1196911196912)
    y.append(0.5318711718664566)
    x.append(1377.992277992278)
    y.append(0.4757944314009414)
    x.append(1447.4903474903476)
    y.append(0.41011270705513125)
    x.append(1526.6409266409269)
    y.append(0.3807546021222384)
    x.append(1835.5653097740994)
    y.append(0.19939269222685885)
    x.append(2093.5706031462005)
    y.append(0.12909216168780502)
    x.append(2341.333967046895)
    y.append(0.0911857420299053)
    x.append(2578.7249310370526)
    y.append(0.0625629193564747)
    x.append(2754.175054052038)
    y.append(0.0468220376016705)
    x.append(3043.297547155743)
    y.append(0.033078966118145904)
    x.append(3435.7200104376343)
    y.append(0.021428159256036205)
    x.append(3797.188362036829)
    y.append(0.014709523294944023)
    #x.append(4138.0097666443)
    #y.append(0.010394256012614915)
    #x.append(4437.53727726832)
    #y.append(0.007783059964888597)
    #x.append(4809.37802877805)
    #y.append(0.005500486503683233)
    #x.append(5201.8657272795035)
    #y.append(0.0037763370738787476)
    #x.append(5656.294266756131)
    #y.append(0.002376824781618676)
    #x.append(6162.454335346305)
    #y.append(0.0015404057465133833)
    #x.append(6658.307239245508)
    #y.append(0.0010277152713018512)
    #x.append(7081.879519868783)
    #y.append(0.0007478854520557367)
    #x.append(7515.922053231939)
    #y.append(0.0006113493020261009)
    #x.append(7826.148139864309)
    #y.append(0.0006301833652603328)
    #x.append(7971.035562513977)
    #y.append(0.0007082739961764732)
    lGraph    = makeAGraph( x, y, color, 3 )
    lGraph.SetMarkerColor(color)
    return lGraph

def dijetobs(color,i90CL=False):
    if i90CL:
        lPFile  = ROOT.TFile("PF90CL.root")
        lPGraph = lPFile.Get("obs")
        lCFile  = ROOT.TFile("Calo90CL.root")
        lCGraph = lCFile.Get("obs")
        lGraph  = merge(lPGraph,lCGraph,color,1400,3900)
        return lGraph
    x = array('d', [])
    y = array('d', [])
    x.append(598.0694980694981)
    y.append(4.417344703140073)
    x.append(630.8880308880309)
    y.append(4.256300264549507)
    x.append(654.0540540540541)
    y.append(3.8075460212223757)
    x.append(694.5945945945946)
    y.append(3.668733193018217)
    x.append(729.3436293436293)
    y.append(3.8075460212223757)
    x.append(764.0926640926641)
    y.append(4.101127070551304)
    x.append(802.7027027027027)
    y.append(4.101127070551304)
    x.append(850.965250965251)
    y.append(4.101127070551304)
    x.append(901.1583011583012)
    y.append(3.4061052563594854)
    x.append(949.4208494208494)
    y.append(2.181271260987366)
    x.append(1001.5444015444016)
    y.append(1.2040517722974518)
    x.append(1053.6679536679537)
    y.append(0.742963950759495)
    x.append(1103.861003861004)
    y.append(0.6404004271197296)
    x.append(1152.1235521235521)
    y.append(0.6404004271197296)
    x.append(1202.3166023166023)
    y.append(0.6404004271197296)
    x.append(1250.5791505791508)
    y.append(0.5318711718664566)
    x.append(1300.772200772201)
    y.append(0.395161107144985)
    x.append(1347.1042471042472)
    y.append(0.29359045735093353)
    x.append(1406.949806949807)
    y.append(0.2530613417967531)
    x.append(1451.3513513513512)
    y.append(0.21812712609873705)
    x.append(1497.6833976833977)
    y.append(0.19512934226359663)
    x.append(1545.9459459459463)
    y.append(0.1880154542858142)
    x.append(1601.930501930502)
    y.append(0.22638034095214513)
    x.append(1773.4939983598003)
    y.append(0.19363285556162788)
    x.append(1856.1470215462607)
    y.append(0.18276433417000734)
    x.append(1949.1398270334746)
    y.append(0.17251326138790926)
    x.append(2104.399649593677)
    y.append(0.19961530735946453)
    x.append(2228.313949153806)
    y.append(0.17271327873762074)
    x.append(2279.686684559755)
    y.append(0.129191924781803)
    x.append(2341.268731827331)
    y.append(0.08603798404788117)
    x.append(2402.91601431447)
    y.append(0.06072699537075284)
    x.append(2506.118131663312)
    y.append(0.05103381655253201)
    x.append(2537.13747856557)
    y.append(0.05104038763675874)
    x.append(2640.6657720122266)
    y.append(0.05735532852726994)
    x.append(2764.9388652799516)
    y.append(0.0683136621065803)
    x.append(2878.676470588234)
    y.append(0.06834591974293597)
    x.append(2971.6040408558847)
    y.append(0.060870506941983885)
    x.append(3074.8061582047267)
    y.append(0.051154420958441714)
    x.append(3167.440169984343)
    y.append(0.03507618092268031)
    x.append(3229.2179229106086)
    y.append(0.0278084825312735)
    x.append(3311.773093267725)
    y.append(0.024056620832096302)
    x.append(3425.412845746663)
    y.append(0.022058937089766098)
    x.append(3507.9027808842166)
    y.append(0.018005500745490594)
    x.append(3631.8170804443444)
    y.append(0.01557891080700686)
    x.append(3797.188362036829)
    y.append(0.014709523294944023)
    x.append(3880.004473272198)
    y.append(0.01605472139402788)
    #x.append(4014.291172742861)
    #y.append(0.014301172804579109)
    #x.append(4096.781107880414)
    #y.append(0.011673263156169997)
    #x.append(4199.754901960783)
    #y.append(0.008004607532669124)
    #x.append(4292.519384179526)
    #y.append(0.006165135029541548)
    #x.append(4395.656266308803)
    #y.append(0.004888573359511099)
    #x.append(4509.328636397525)
    #y.append(0.004614774148116912)
    #x.append(4674.797770819354)
    #y.append(0.004754085899371195)
    #x.append(4778.293446656227)
    #y.append(0.005189296395244354)
    #x.append(4902.240363826138)
    #y.append(0.004622306281508651)
    #x.append(5036.527063296801)
    #y.append(0.004117443041530253)
    #x.append(5139.663945426078)
    #y.append(0.003264879400966817)
    #x.append(5273.91802728696)
    #y.append(0.0028249949084984487)
    #x.append(5418.740214717065)
    #y.append(0.002995817276430047)
    #x.append(5563.56240214717)
    #y.append(0.0031769689661235974)
    #x.append(5739.240848430627)
    #y.append(0.0029139008040259193)
    #x.append(5945.840788786996)
    #y.append(0.002449838209903935)
    #x.append(6121.388764631328)
    #y.append(0.0020004411218901654)
    #x.append(6266.015246402742)
    #y.append(0.0017820229509131172)
    #x.append(6266.015246402742)
    #y.append(0.0017820229509131172)
    #x.append(6431.256057556102)
    #y.append(0.0014979640103628745)
    #x.append(6431.256057556102)
    #y.append(0.0014979640103628745)
    #x.append(6596.464251099679)
    #y.append(0.0012231257522893248)
    #x.append(6782.286774025198)
    #y.append(0.0009424133022435063)
    #x.append(6906.201073585326)
    #y.append(0.0008154048580218117)
    #x.append(7092.219302169536)
    #y.append(0.000747917549775239)
    #x.append(7236.943636770297)
    #y.append(0.0007269362219934222)
    #x.append(7236.943636770297)
    #y.append(0.0007269362219934222)
    #x.append(7402.380153582345)
    #y.append(0.0007274355606432079)
    #x.append(7516.117758890628)
    #y.append(0.0007277790549174683)
    #x.append(7702.266457913961)
    #y.append(0.000749813755546937)
    #x.append(7867.800827555356)
    #y.append(0.0008186658745549854)
    #x.append(8002.446320733617)
    #y.append(0.0010038700029024285)
    lGraph    = makeAGraph( x, y, color, 3 )
    lGraph.SetMarkerColor(color)
    return lGraph

def dijetxs(color):
    x = array('d', [])
    y = array('d', [])
    x.append(528.7733914858716)
    y.append(57.269239965262344)
    x.append(631.2905390292997)
    y.append(26.146418729332762)
    x.append(795.7485275479014)
    y.append(10.943588903119819)
    x.append(980.9839334973528)
    y.append(4.998039360562294)
    x.append(1166.2193394468052)
    y.append(2.2826513012206147)
    x.append(1331.0361216730032)
    y.append(1.3151916426227461)
    x.append(1578.3102214269736)
    y.append(0.6008150098368491)
    x.append(1825.7147916200695)
    y.append(0.30829460763931776)
    x.append(2073.0541265936026)
    y.append(0.1492637583468037)
    x.append(2217.3544322672033)
    y.append(0.09943936422165509)
    x.append(2454.5170729888905)
    y.append(0.0556698333169542)
    x.append(2701.98687840155)
    y.append(0.03027483510044679)
    x.append(2928.9075896518298)
    y.append(0.018491825891702274)
    x.append(3104.1946246179077)
    y.append(0.011967992892333293)
    x.append(3310.4357712666806)
    y.append(0.007309405483957529)
    x.append(3475.513494371131)
    y.append(0.005313471607526083)
    x.append(3568.343211809438)
    y.append(0.004337281648532702)
    lGraph    = makeAGraph( x, y, color, 3 )
    lGraph.SetMarkerColor(color)
    return lGraph

def divide(iG,iXS,iGB=False,iGDM=1,iGQ=0.25,iMDM=1.):
    for i0 in range(0,iG.GetN()):
        iG.GetY()[i0] = iG.GetY()[i0]/iXS.Eval(iG.GetX()[i0])
        lDMWidth = avtotwidth(2,iGDM,iGQ,iG.GetX()[i0],iMDM)
        lWidth   = avtotwidth(2,0.  ,iGQ,iG.GetX()[i0],iMDM)
        iG.GetY()[i0] = (lWidth/lDMWidth)*iG.GetY()[i0]
        if iGB:
            iG.GetY()[i0]=(math.sqrt(iG.GetY()[i0]))*0.25*6
            
def main(iAxial,i90CL,iExp):
    leg   = ROOT.TLegend(0.60,0.60,0.80,0.85)
    #leg.SetHeader("g_{DM}=0.0 g_{q}=0.25")
    leg.SetFillColor(0)    
    leg.SetBorderSize(0)  
    leg.SetFillStyle(0)  
    canv0 = ROOT.TCanvas("can0","can0",1200,800)
    exp=dijetexp(ROOT.kGreen,i90CL)
    obs=dijetobs(ROOT.kRed  ,i90CL)
    xs=dijetxs(ROOT.kBlack)
    divide(exp,xs,True)
    divide(obs,xs,True)
    exp.GetXaxis().SetTitle("m_{med}")
    #exp.GetYaxis().SetTitle("g_{B}")
    #exp.GetYaxis().SetTitle("#sigma_{J}(m_{med})")
    exp.GetYaxis().SetTitle("#mu=#sigma_{J}/#sigma_{0}")
    exp.Draw("alp")
    obs.Draw("lp")
    #xs .Draw("lp")                                                                                                                                      #leg.AddEntry(exp,"expected","lp")
    #leg.AddEntry(obs,"observed","lp")
    leg.Draw()
    canv0.Update()
    gdm=1
    canv1 = ROOT.TCanvas("can1","can1",1200,800)
    lExp,lXExp=make2DGraph(exp,gdm,canv1,leg,"expected 95% CL.",1,iAxial)
    lObs,lXObs=make2DGraph(obs,gdm,canv1,leg,"observed 95% CL.",ROOT.kOrange,iAxial)
    if iExp:
	    lExp.Draw("colz")
    else:
	    lObs.Draw("colz")
    lXExp.Draw("l sames")
    lXObs.Draw("l sames")
    leg.Draw()
    canv1.Update()
    lExp.GetXaxis().SetTitle("m_{med} (GeV)")
    lExp.GetYaxis().SetTitle("m_{dm}  (GeV)")
    lExp.GetZaxis().SetTitle("g_{q}")
    ROOT.gPad.Modified()
    ROOT.gPad.RedrawAxis()
    fileend="_dijet_av" if iAxial else "_dijet_v"
    fileend=fileend+"_90" if i90CL else fileend
    fileend=fileend+"_Exp" if iExp else fileend
    canv1.SaveAs("gq_mdm_mmed"+fileend+".png")
    canv1.SaveAs("gq_mdm_mmed"+fileend+".pdf")
    lFile = ROOT.TFile("MMedMDM"+fileend+".root","RECREATE")
    lObs.SetName("obs")
    lObs.SetTitle("obs")
    lExp.SetName("exp")
    lExp.SetTitle("exp")
    lXObs.SetName("obs_025")
    lXObs.SetTitle("obs_025")
    lXExp.SetName("exp_025")
    lXExp.SetTitle("exp_025")
    lObs.Write()
    lExp.Write()
    lXObs.Write()
    lXExp.Write()
    end()
        
if __name__ == '__main__':
    options=parser()
    main(options.Axial,options.CL90,options.Exp)

